/**
 * @typedef {import('../types/File.d.ts').FileHeader} FileHeader
 * @typedef {import('../types/Parser.d.ts').Parser} Parser
 * @typedef {import('../types/Preprocessor.d.ts').Preprocessor} Preprocessor
 * @typedef {import('../types/Preprocessor.d.ts').preprocessor} preprocessor
 * @typedef {import('../types/Transform.d.ts').Transform} Transform
 * @typedef {import('../types/Filter.d.ts').Filter} Filter
 * @typedef {import('../types/Filter.d.ts').Matcher} Matcher
 * @typedef {import('../types/Format.d.ts').Format} Format
 * @typedef {import('../types/Format.d.ts').Formatter} Formatter
 * @typedef {import('../types/Action.d.ts').Action} Action
 */
export class Register {
    /**
     * Below is a ton of boilerplate. Explanation:
     *
     * You can register things on the StyleDictionary class level e.g. StyleDictionary.registerFormat()
     * You can also register these things on StyleDictionary instance (through config) or on StyleDictionary instance's platform property.
     *
     * Therefore, we have to make use of static props vs instance props and use getters and setters to merge these together.
     */
    static transform: Record<string, Omit<import("../types/Transform.d.ts").Transform, "name">>;
    static transformGroup: Record<string, string[]>;
    static format: Record<string, import("../types/Format.d.ts").Formatter>;
    static action: Record<string, Omit<import("../types/Action.d.ts").Action, "name">>;
    static filter: Record<string, import("../types/Filter.d.ts").Matcher>;
    /** @type {Record<string, FileHeader>} */
    static fileHeader: Record<string, FileHeader>;
    /** @type {Parser[]} */
    static parsers: Parser[];
    /** @type {Record<string, preprocessor>} */
    static preprocessors: Record<string, preprocessor>;
    /**
     * @param {Transform} cfg
     */
    static registerTransform(cfg: Transform): void;
    /**
     * @param {Transform} transform
     * @param {typeof Register | Register} target
     */
    static __registerTransform(transform: Transform, target: typeof Register | Register): typeof Register;
    /**
     * @param {{ name: string; transforms: string[]; }} cfg
     */
    static registerTransformGroup(cfg: {
        name: string;
        transforms: string[];
    }): void;
    /**
     * @param {{ name: string; transforms: string[]; }} transformGroup
     * @param {typeof Register | Register} target
     */
    static __registerTransformGroup(transformGroup: {
        name: string;
        transforms: string[];
    }, target: typeof Register | Register): typeof Register | Register;
    /**
     * @param {Format} cfg
     */
    static registerFormat(cfg: Format): void;
    /**
     * @param  {Format} format
     * @param {typeof Register | Register} target
     */
    static __registerFormat(format: Format, target: typeof Register | Register): typeof Register | Register;
    /**
     * @param {Action} cfg
     */
    static registerAction(cfg: Action): void;
    /**
     * @param {Action} action
     * @param {typeof Register | Register} target
     */
    static __registerAction(action: Action, target: typeof Register | Register): typeof Register | Register;
    /**
     * @param {Filter} cfg
     */
    static registerFilter(cfg: Filter): void;
    /**
     * @param {Filter} filter
     * @param {typeof Register | Register} target
     */
    static __registerFilter(filter: Filter, target: typeof Register | Register): typeof Register | Register;
    /**
     * @param {Parser} cfg
     */
    static registerParser(cfg: Parser): void;
    /**
     * @param {import('../types/Parser.d.ts').Parser} parser
     * @param {typeof Register | Register} target
     */
    static __registerParser(parser: import('../types/Parser.d.ts').Parser, target: typeof Register | Register): typeof Register | Register;
    /**
     * @param {Preprocessor} cfg
     */
    static registerPreprocessor(cfg: Preprocessor): void;
    /**
     * @param {Preprocessor} cfg
     * @param {typeof Register | Register} target
     */
    static __registerPreprocessor(cfg: Preprocessor, target: typeof Register | Register): typeof Register | Register;
    /**
     * @param {{name: string; fileHeader: FileHeader;}} cfg
     */
    static registerFileHeader(cfg: {
        name: string;
        fileHeader: FileHeader;
    }): void;
    /**
     * @param {{name: string; fileHeader: FileHeader;}} cfg
     * @param {typeof Register | Register} target
     */
    static __registerFileHeader(cfg: {
        name: string;
        fileHeader: FileHeader;
    }, target: typeof Register | Register): typeof Register | Register;
    /**
     * @param {Transform} cfg
     */
    registerTransform(cfg: Transform): void;
    /** @param {Record<string, Omit<Transform, 'name'>>} v */
    set transform(v: Record<string, Omit<import("../types/Transform.d.ts").Transform, "name">>);
    get transform(): Record<string, Omit<import("../types/Transform.d.ts").Transform, "name">>;
    _transform: Record<string, Omit<import("../types/Transform.d.ts").Transform, "name">> | undefined;
    /**
     * @param {{ name: string; transforms: string[]; }} cfg
     */
    registerTransformGroup(cfg: {
        name: string;
        transforms: string[];
    }): void;
    /** @param {Record<string, string[]>} v */
    set transformGroup(v: Record<string, string[]>);
    get transformGroup(): Record<string, string[]>;
    _transformGroup: Record<string, string[]> | undefined;
    /**
     * @param {Format} cfg
     */
    registerFormat(cfg: Format): void;
    /** @param {Record<string, Formatter>} v */
    set format(v: Record<string, import("../types/Format.d.ts").Formatter>);
    get format(): Record<string, import("../types/Format.d.ts").Formatter>;
    _format: Record<string, import("../types/Format.d.ts").Formatter> | undefined;
    /**
     * @param {Action} cfg
     */
    registerAction(cfg: Action): void;
    /** @param {Record<string, Omit<Action,'name'>>} v */
    set action(v: Record<string, Omit<import("../types/Action.d.ts").Action, "name">>);
    get action(): Record<string, Omit<import("../types/Action.d.ts").Action, "name">>;
    _action: Record<string, Omit<import("../types/Action.d.ts").Action, "name">> | undefined;
    /**
     * @param {Filter} cfg
     */
    registerFilter(cfg: Filter): void;
    /** @param {Record<string, Matcher>} v */
    set filter(v: Record<string, import("../types/Filter.d.ts").Matcher>);
    get filter(): Record<string, import("../types/Filter.d.ts").Matcher>;
    _filter: Record<string, import("../types/Filter.d.ts").Matcher> | undefined;
    /**
     * @param {Parser} cfg
     */
    registerParser(cfg: Parser): void;
    /** @param {Parser[]} v */
    set parsers(v: import("../types/Parser.d.ts").Parser[]);
    get parsers(): import("../types/Parser.d.ts").Parser[];
    _parsers: import("../types/Parser.d.ts").Parser[] | undefined;
    /**
     * @param {Preprocessor} cfg
     */
    registerPreprocessor(cfg: Preprocessor): void;
    /** @param {Record<string, preprocessor>} v */
    set preprocessors(v: Record<string, import("../types/Preprocessor.d.ts").preprocessor>);
    get preprocessors(): Record<string, import("../types/Preprocessor.d.ts").preprocessor>;
    _preprocessors: Record<string, import("../types/Preprocessor.d.ts").preprocessor> | undefined;
    /**
     * @param {{name: string; fileHeader: FileHeader;}} cfg
     */
    registerFileHeader(cfg: {
        name: string;
        fileHeader: FileHeader;
    }): void;
    /** @param {Record<string, FileHeader>} v */
    set fileHeader(v: Record<string, import("../types/File.d.ts").FileHeader>);
    get fileHeader(): Record<string, import("../types/File.d.ts").FileHeader>;
    _fileHeader: Record<string, import("../types/File.d.ts").FileHeader> | undefined;
}
export type FileHeader = import('../types/File.d.ts').FileHeader;
export type Parser = import('../types/Parser.d.ts').Parser;
export type Preprocessor = import('../types/Preprocessor.d.ts').Preprocessor;
export type preprocessor = import('../types/Preprocessor.d.ts').preprocessor;
export type Transform = import('../types/Transform.d.ts').Transform;
export type Filter = import('../types/Filter.d.ts').Filter;
export type Matcher = import('../types/Filter.d.ts').Matcher;
export type Format = import('../types/Format.d.ts').Format;
export type Formatter = import('../types/Format.d.ts').Formatter;
export type Action = import('../types/Action.d.ts').Action;
