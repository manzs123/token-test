/**
 * @typedef {import('../types/Volume.d.ts').Volume} Volume
 * @typedef {import('../types/DesignToken.d.ts').Dictionary} Dictionary
 * @typedef {import('../types/DesignToken.d.ts').TransformedToken} TransformedToken
 * @typedef {import('../types/Config.d.ts').PlatformConfig} PlatformConfig
 * @typedef {import('../types/Config.d.ts').Config} Config
 * @typedef {import('../types/File.d.ts').File} File
 * @typedef {import('../types/Filter.d.ts').Matcher} Matcher
 * @typedef {import('../types/Format.d.ts').FormatterArguments} FormatterArguments
 */
/**
 * Takes the style token object and a format and returns a
 * string that can be written to a file.
 * @memberOf StyleDictionary
 * @param {File} file
 * @param {PlatformConfig} platform
 * @param {Dictionary} dictionary
 * @param {Config} options
 * @param {Volume} [vol]
 */
export default function buildFile(file: File, platform: import("../types/Config.d.ts").PlatformConfig | undefined, dictionary: Dictionary, options: Config, vol?: import("../types/Volume.d.ts").Volume | undefined): Promise<null | undefined>;
export type Volume = import('../types/Volume.d.ts').Volume;
export type Dictionary = import('../types/DesignToken.d.ts').Dictionary;
export type TransformedToken = import('../types/DesignToken.d.ts').TransformedToken;
export type PlatformConfig = import('../types/Config.d.ts').PlatformConfig;
export type Config = import('../types/Config.d.ts').Config;
export type File = import('../types/File.d.ts').File;
export type Matcher = import('../types/Filter.d.ts').Matcher;
export type FormatterArguments = import('../types/Format.d.ts').FormatterArguments;
