/**
 * @typedef {import('../../../types/Config.d.ts').ResolveReferencesOptions} RefOpts
 * @typedef {import('../../../types/Config.d.ts').ResolveReferencesOptionsInternal} RefOptsInternal
 * @typedef {import('../../../types/DesignToken.d.ts').DesignTokens} DesignTokens
 * @typedef {import('../../../types/DesignToken.d.ts').DesignToken} DesignToken
 */
/**
 * Public API wrapper around the functon below this one
 * @param {string} value
 * @param {DesignTokens} tokens
 * @param {RefOpts} [opts]
 * @returns {string|number|undefined}
 */
export function resolveReferences(value: string, tokens: DesignTokens, opts?: import("../../../types/Config.d.ts").ResolveReferencesOptions | undefined): string | number | undefined;
/**
 * Utility to resolve references inside a string value
 * @param {string} value
 * @param {DesignTokens} tokens
 * @param {RefOptsInternal} [opts]
 * @returns {string|number|undefined}
 */
export function _resolveReferences(value: string, tokens: DesignTokens, { regex, separator, opening_character, closing_character, ignorePaths, usesDtcg, current_context, stack, foundCirc, firstIteration, throwImmediately, }?: import("../../../types/Config.d.ts").ResolveReferencesOptionsInternal | undefined): string | number | undefined;
export type RefOpts = import('../../../types/Config.d.ts').ResolveReferencesOptions;
export type RefOptsInternal = import('../../../types/Config.d.ts').ResolveReferencesOptionsInternal;
export type DesignTokens = import('../../../types/DesignToken.d.ts').DesignTokens;
export type DesignToken = import('../../../types/DesignToken.d.ts').DesignToken;
