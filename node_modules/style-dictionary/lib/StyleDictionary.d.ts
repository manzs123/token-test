/**
 * Style Dictionary module
 *
 * @module style-dictionary
 * @typicalname StyleDictionary
 * @example
 * ```js
 * import StyleDictionary from 'style-dictionary';
 * new StyleDictionary.extend('config.json').buildAllPlatforms();
 * ```
 */
export default class StyleDictionary extends Register {
    static VERSION: string;
    /**
     * @param {Config | string} config
     * @param {{
     *   init?: boolean,
     *   verbosity?: LogConfig['verbosity'],
     *   warnings?: LogConfig['warnings'],
     *   volume?: Volume
     * }} ctorOpts
     */
    constructor(config?: Config | string, { init, verbosity, warnings, volume }?: {
        init?: boolean;
        verbosity?: LogConfig['verbosity'];
        warnings?: LogConfig['warnings'];
        volume?: Volume;
    });
    /** @param {Config} v */
    set options(v: import("../types/Config.d.ts").Config);
    /** @returns {Config} */
    get options(): import("../types/Config.d.ts").Config;
    _options: import("../types/Config.d.ts").Config | undefined;
    config: string | import("../types/Config.d.ts").Config;
    /** @type {Tokens|TransformedTokens} */
    tokens: Tokens | TransformedTokens;
    /** @type {TransformedToken[]} */
    allTokens: TransformedToken[];
    /** @type {boolean | undefined} */
    usesDtcg: boolean | undefined;
    /** @type {LogConfig} */
    log: LogConfig;
    /** @type {string[]} */
    source: string[];
    /** @type {string[]} */
    include: string[];
    /** @type {Record<string, PlatformConfig>} */
    platforms: Record<string, PlatformConfig>;
    /** @type {Volume} */
    volume: Volume;
    /**
     * Gets set after transform because filter happens on format level,
     * so we know they are transformed by then.
     * @type {TransformedTokens}
     */
    unfilteredTokens: TransformedTokens;
    hasInitialized: Promise<any>;
    hasInitializedResolve: (value: any) => void;
    /**
     * @param {{verbosity?: LogConfig['verbosity'], warnings?: LogConfig['warnings']}} [opts]
     * @returns
     */
    init(opts?: {
        verbosity?: LogConfig['verbosity'];
        warnings?: LogConfig['warnings'];
    } | undefined): Promise<StyleDictionary>;
    /**
     * @param {Config | string} [config]
     * @param {{
     *   mutateOriginal?: boolean,
     *   verbosity?: LogConfig['verbosity'],
     *   warnings?: LogConfig['warnings'],
     *   volume?: Volume
     * }} [opts]
     * @returns {Promise<StyleDictionary>}
     */
    extend(config?: string | import("../types/Config.d.ts").Config | undefined, opts?: {
        mutateOriginal?: boolean | undefined;
        verbosity?: LogConfig['verbosity'];
        warnings?: LogConfig['warnings'];
        volume?: import("../types/Volume.d.ts").Volume | undefined;
    } | undefined): Promise<StyleDictionary>;
    /**
     * @param {string} platform
     * @returns {Promise<TransformedTokens>}
     */
    exportPlatform(platform: string): Promise<TransformedTokens>;
    /**
     * @param {string} platform
     * @returns
     */
    getPlatform(platform: string): Promise<{
        dictionary: {
            tokens: import("../types/DesignToken.d.ts").TransformedTokens;
            allTokens: import("../types/DesignToken.d.ts").TransformedToken[];
        };
        platformConfig: import("../types/Config.d.ts").PlatformConfig;
    }>;
    /**
     * @param {string} platform
     * @returns
     */
    buildPlatform(platform: string): Promise<this>;
    buildAllPlatforms(): Promise<this>;
    /**
     * @param {string} platform
     * @returns
     */
    cleanPlatform(platform: string): Promise<this>;
    cleanAllPlatforms(): Promise<this>;
}
export type Volume = import('../types/Volume.d.ts').Volume;
export type Config = import('../types/Config.d.ts').Config;
export type PlatformConfig = import('../types/Config.d.ts').PlatformConfig;
export type LogConfig = import('../types/Config.d.ts').LogConfig;
export type Token = import('../types/DesignToken.d.ts').DesignToken;
export type TransformedToken = import('../types/DesignToken.d.ts').TransformedToken;
export type Tokens = import('../types/DesignToken.d.ts').DesignTokens;
export type TransformedTokens = import('../types/DesignToken.d.ts').TransformedTokens;
export type Dictionary = import('../types/DesignToken.d.ts').Dictionary;
import { Register } from './Register.js';
